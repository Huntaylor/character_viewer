// Mocks generated by Mockito 5.4.2 from annotations
// in simpson_viewer/test/home/home_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:simpson_viewer/presentation/cubit/home/home_cubit.dart' as _i2;
import 'package:simpson_viewer/utils/app_library.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHomeState_0 extends _i1.SmartFake implements _i2.HomeState {
  _FakeHomeState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoading_1 extends _i1.SmartFake implements _i2.Loading {
  _FakeLoading_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReady_2 extends _i1.SmartFake implements _i2.Ready {
  _FakeReady_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeCubit extends _i1.Mock implements _i2.HomeCubit {
  MockHomeCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHomeState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.HomeState);
  @override
  _i3.Stream<_i2.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.HomeState>.empty(),
      ) as _i3.Stream<_i2.HomeState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void emit(_i2.HomeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onChange(_i4.Change<_i2.HomeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [HomeState].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeState extends _i1.Mock implements _i2.HomeState {
  MockHomeState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);
  @override
  bool get isReady => (super.noSuchMethod(
        Invocation.getter(#isReady),
        returnValue: false,
      ) as bool);
  @override
  _i2.Loading get asLoading => (super.noSuchMethod(
        Invocation.getter(#asLoading),
        returnValue: _FakeLoading_1(
          this,
          Invocation.getter(#asLoading),
        ),
      ) as _i2.Loading);
  @override
  _i2.Ready get asReady => (super.noSuchMethod(
        Invocation.getter(#asReady),
        returnValue: _FakeReady_2(
          this,
          Invocation.getter(#asReady),
        ),
      ) as _i2.Ready);
  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}
